package vista;
import conexion.Conexion;
import java.awt.*;
import java.awt.event.MouseEvent;
import java.awt.event.MouseAdapter;
import java.sql.*;
import java.sql.SQLException;
import javax.swing.table.DefaultTableModel;
import javax.swing.*;
import controlador.ctr_producto;
import modelo.producto;
//import static vista.inter_gestionarProductos.jt_productos;
/**
 *
 * @author Renato
 */
public class inter_venta extends javax.swing.JInternalFrame {

    /**
     * Creates new form inter_gestionarCategorias
     */
    public double pc;
    public double pv;
    public int venta;
    private int idProductos;
    private String obtenerIdCategoriaCombo="";
    public inter_venta() {
        initComponents();
        this.setSize(new Dimension(900, 500));
        this.setTitle("Gestionar productos");
        this.setVisible(true);
        this.cargarTablaProductos();
        this.cargarCategoriaCombo();
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jt_producto = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        b_actualizar = new javax.swing.JButton();
        b_eliminar = new javax.swing.JButton();
        b_actualizar1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        tf_preciov = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        tf_nombre = new javax.swing.JTextField();
        tf_cantidad = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        tf_descripcion = new javax.swing.JTextField();
        cb_categoria = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        tf_precioc = new javax.swing.JTextField();
        tf_venta = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        tf_cantidadv = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        tf_ganancias = new javax.swing.JTextField();
        wallpaper = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setResizable(true);
        setPreferredSize(new java.awt.Dimension(900, 500));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Productos disponibles:");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 10, -1, -1));

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jt_producto.setAutoCreateRowSorter(true);
        jt_producto.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6", "Title 7", "Title 8"
            }
        ));
        jScrollPane1.setViewportView(jt_producto);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, 560, 180));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 570, 200));

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        b_actualizar.setBackground(new java.awt.Color(204, 204, 255));
        b_actualizar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        b_actualizar.setText("Filtrar");
        b_actualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_actualizarActionPerformed(evt);
            }
        });

        b_eliminar.setBackground(new java.awt.Color(255, 153, 153));
        b_eliminar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        b_eliminar.setText("Eliminar");
        b_eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_eliminarActionPerformed(evt);
            }
        });

        b_actualizar1.setBackground(new java.awt.Color(102, 204, 255));
        b_actualizar1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        b_actualizar1.setText("Aceptar");
        b_actualizar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_actualizar1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(29, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(b_actualizar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(b_eliminar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(b_actualizar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(23, 23, 23))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(b_actualizar)
                .addGap(18, 18, 18)
                .addComponent(b_actualizar1)
                .addGap(18, 18, 18)
                .addComponent(b_eliminar)
                .addContainerGap(85, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 40, 130, 200));

        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("Ganancia total:");
        jPanel3.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, -1, -1));
        jPanel3.add(tf_preciov, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 70, 150, -1));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setText("Iva:");
        jPanel3.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 40, -1, -1));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setText("Nombre:");
        jPanel3.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setText("Categoria:");
        jPanel3.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 40, -1, -1));
        jPanel3.add(tf_nombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 10, 150, -1));
        jPanel3.add(tf_cantidad, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 10, 110, -1));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setText("Cantidad vendida:");
        jPanel3.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 70, -1, -1));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel7.setText("Descripcion:");
        jPanel3.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 10, -1, -1));
        jPanel3.add(tf_descripcion, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 10, 160, -1));

        cb_categoria.setForeground(new java.awt.Color(255, 255, 255));
        cb_categoria.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione categoria: ", "f", "f", "f" }));
        jPanel3.add(cb_categoria, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 40, 160, -1));

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel8.setText("Precio compra:");
        jPanel3.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, -1, -1));
        jPanel3.add(tf_precioc, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 40, 150, -1));

        tf_venta.setText("0");
        tf_venta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf_ventaActionPerformed(evt);
            }
        });
        jPanel3.add(tf_venta, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 40, 110, -1));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel9.setText("Stock:");
        jPanel3.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 10, -1, -1));
        jPanel3.add(tf_cantidadv, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 70, 130, -1));

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel10.setText("Precio venta:");
        jPanel3.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, -1, -1));
        jPanel3.add(tf_ganancias, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 100, 150, -1));

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 250, 710, 130));

        wallpaper.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/fondo3.jpg"))); // NOI18N
        getContentPane().add(wallpaper, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 730, 420));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void b_actualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_actualizarActionPerformed
        // TODO add your handling code here
        this.EnviarDatosProductoSeleccionada(this.idProductos);
        this.cargarTablaProductosFiltro();
        
    }//GEN-LAST:event_b_actualizarActionPerformed

    
    private void b_eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_eliminarActionPerformed
        // TODO add your handling code here:
       
    }//GEN-LAST:event_b_eliminarActionPerformed

    private void tf_ventaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf_ventaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tf_ventaActionPerformed

    private void b_actualizar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_actualizar1ActionPerformed
        
        producto prod=new producto();
        ctr_producto ct_prod=new ctr_producto();
        String iva="";
        String categoria="";
        
        categoria=cb_categoria.getSelectedItem().toString().trim();
        if(tf_nombre.getText().isEmpty() || tf_cantidad.getText().isEmpty() || tf_preciov.getText().isEmpty() || tf_precioc.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "Complete todos los campos");
           
        }else{
            //consulta para ver si el producto ya existe
            
                    if(categoria.equalsIgnoreCase("Seleccione categoria: ")){
                        JOptionPane.showMessageDialog(null, "Seleccione categoria");
                    }else{
                        try{
                            prod.setNombre(tf_nombre.getText().trim());
                            prod.setCantidad(Integer.parseInt(tf_cantidad.getText().trim()));
                            double precio=0.0;
                            String precio_tf="";
                            precio_tf=tf_preciov.getText().trim();
                            
                            //id categoria - cargar metodo que tiene el id de la categoria
                            
                            this.idCategoria();
                            //prod.setIdCategoria(obtenerIdCategoriaCombo);
                            if(this.actualizar(prod, idProductos)){
                                 JOptionPane.showMessageDialog(null, "Registro actualizado");
                                 //this.cargarTablaProductos();
                                 this.ganancia();
                                 this.cargarTablaProductosFiltro();
                                 this.cargarCategoriaCombo();
                                 this.Limpiar();
                                  
                            }else{
                                 JOptionPane.showMessageDialog(null,"Error al actualizar");
                            }
                        }catch(Exception e){
                            JOptionPane.showMessageDialog(null, "Error en: " + e);
                        }
                    //this.Limpiar();
                    
                }
            
        }
        
        // TODO add your handling code here:
    }//GEN-LAST:event_b_actualizar1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton b_actualizar;
    private javax.swing.JButton b_actualizar1;
    private javax.swing.JButton b_eliminar;
    private javax.swing.JComboBox<String> cb_categoria;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    public static javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTable jt_producto;
    private javax.swing.JTextField tf_cantidad;
    private javax.swing.JTextField tf_cantidadv;
    private javax.swing.JTextField tf_descripcion;
    private javax.swing.JTextField tf_ganancias;
    private javax.swing.JTextField tf_nombre;
    private javax.swing.JTextField tf_precioc;
    private javax.swing.JTextField tf_preciov;
    private javax.swing.JTextField tf_venta;
    private javax.swing.JLabel wallpaper;
    // End of variables declaration//GEN-END:variables
    //metodo para limpiar el combo box
    private void Limpiar(){
        tf_nombre.setText("");
        tf_nombre.setText("");
        tf_nombre.setText("");
        tf_nombre.setText("");
        //cb_iva.setSelectedItem("Seleccione iva: ");
        //cb_categoria.setSelectedItem("Seleccione categoria: ");
    }
    private boolean actualizar(producto prod, int idProducto){
         pc=Double.parseDouble(tf_precioc.getText());
         venta=Integer.parseInt(tf_venta.getText());
         pv=Double.parseDouble(tf_preciov.getText());
         prod.setEstado(1);
         this.resta();
         boolean resp=false;
         inter_producto n=new inter_producto();
         Connection cone=Conexion.conectar();
         try{
                PreparedStatement consulta=cone.prepareStatement("update tb_producto_3 set nombre=?, cantidad=?, precioc=?, descripcion=?, preciov=?, porcIva=?, categoria=?, estado=? where idProducto='" + idProducto + "'");
                consulta.setString(1, tf_nombre.getText().trim());
                consulta.setInt(2, this.resta());
                consulta.setDouble(3, pc);
                consulta.setString(4, tf_descripcion.getText().trim());
                consulta.setDouble(5, pv);
                consulta.setInt(6, venta);
                consulta.setString(7, cb_categoria.getSelectedItem().toString());
                consulta.setInt(8, prod.getIdProducto());
                if(consulta.executeUpdate()>0){
                    resp=true;
                }
                cone.close();
            }catch(SQLException e){
                System.out.println("Error al guardar producto " + e);
            }
           return resp;                 
    }
//metodo para cargar categorias en el combo box
    private void cargarCategoriaCombo(){
        Connection cn=Conexion.conectar();
        String sql="select * from tb_categorias";
        Statement st;
        try{
            st=cn.createStatement();
            ResultSet rs=st.executeQuery(sql);
            cb_categoria.removeAllItems();
            cb_categoria.addItem("Seleccione categoria: ");
            while(rs.next()){
                cb_categoria.addItem(rs.getString("descripcion"));
            }
            cn.close();
        }catch(SQLException e){
            System.out.println("Error al cargar categorias");
        }
    }
//metodo para mostrar los productos
    String descripcionCat="";
    int precioc=0;
    int porcIva=0;
    double IVA=0;
    private void cargarTablaProductos(){
        Connection con=Conexion.conectar();
        DefaultTableModel model= new DefaultTableModel();
        String sql="select * from tb_producto_3; ";
        Statement st;
            
        try{
            st=con.createStatement();
            ResultSet rs=st.executeQuery(sql);
            inter_venta.jt_producto=new JTable(model);
            inter_venta.jScrollPane1.setViewportView(inter_venta.jt_producto);
            
            model.addColumn("Nro");
            model.addColumn("nombre");
            model.addColumn("cantidad");
            model.addColumn("precio compra");
            model.addColumn("precio venta");
            model.addColumn("descripcion");
            model.addColumn("venta");
            model.addColumn("categoria");
            model.addColumn("estado");
            while(rs.next()){
                
                Object fila[] =new Object[9];
                for(int i=0;i<9;i++){
                    
                    fila[i]=rs.getObject(i+1);
                }
                model.addRow(fila);
            }
            con.close();
        }catch(SQLException e){
            System.out.println("Error al llenar la tabla producto." + e);
        }
        jt_producto.addMouseListener(new MouseAdapter(){
            
            public void mouseClicked(MouseEvent e){
               int fila_point=jt_producto.rowAtPoint(e.getPoint());
               int columna_point=0;
               if(fila_point>-1){
                   idProductos=(int)model.getValueAt(fila_point, columna_point);
                   EnviarDatosProductoSeleccionada(idProductos);
               }
           } 
        });
    }
    producto prod=new producto();
    private void cargarTablaProductosFiltro(){
        Connection con=Conexion.conectar();
        DefaultTableModel model= new DefaultTableModel();
         
        try{
            /*int idc=this.idCategoria();
            System.out.println(idc); */
            Statement consulta=con.createStatement();
            ResultSet rs=consulta.executeQuery("select * from tb_producto_3 where categoria= '" + cb_categoria.getSelectedItem().toString() + "'");
            inter_venta.jt_producto=new JTable(model);
            inter_venta.jScrollPane1.setViewportView(inter_venta.jt_producto);
            
            model.addColumn("Nro");
            model.addColumn("nombre");
            model.addColumn("cantidad");
            model.addColumn("precio compra");
            model.addColumn("precio venta");
            model.addColumn("descripcion");
            model.addColumn("venta");
            model.addColumn("categoria");
            model.addColumn("estado");
            while(rs.next()){
                
                
                Object fila[] =new Object[9];
                for(int i=0;i<9;i++){
                    
                    fila[i]=rs.getObject(i+1);
                }
                model.addRow(fila);
            }
            con.close();
        }catch(SQLException e){
            System.out.println("Error al llenar la tabla producto." + e);
        }
        jt_producto.addMouseListener(new MouseAdapter(){
            
            public void mouseClicked(MouseEvent e){
               int fila_point=jt_producto.rowAtPoint(e.getPoint());
               int columna_point=0;
               if(fila_point>-1){
                   idProductos=(int)model.getValueAt(fila_point, columna_point);
                   EnviarDatosProductoSeleccionada(idProductos);
               }
           } 
        });
    }
// metodo para mostrar todas las categorias
   
    private void EnviarDatosCategoriaSeleccionada(int idCategoria){
        try{
            Connection con=Conexion.conectar();
            PreparedStatement pst=con.prepareStatement("select * from tb_categorias where idCategoria='" + idCategoria + "'");
            ResultSet rs=pst.executeQuery();
            if(rs.next()){
                tf_preciov.setText(rs.getString("descripcion"));
            }
            con.close();
        }catch(SQLException e){
            System.out.println("Error al seleccionar categoria." + e);
        }
    }
    
    private void EnviarDatosProductoSeleccionada(int idCat){
        try{
            Connection con=Conexion.conectar();
            PreparedStatement pst=con.prepareStatement("select * from tb_producto_3 where idProducto='" + idCat + "'");
            ResultSet rs=pst.executeQuery();
            if(rs.next()){
                tf_descripcion.setText(rs.getString("descripcion"));
                tf_precioc.setText(rs.getString("precioc"));
                tf_preciov.setText(rs.getString("preciov"));
                tf_venta.setText(rs.getString("porcIva"));
                tf_nombre.setText(rs.getString("nombre"));
                tf_cantidad.setText(rs.getString("cantidad"));
                String idCate=rs.getString("categoria");
                cb_categoria.setSelectedItem(relacionarCategorias(idCate));
            }
            con.close();
        }catch(SQLException e){
            System.out.println("Error al seleccionar producto." + e);
        }
    }
    boolean resp=false;
    private void ganancia(){
        producto prod=new producto();
        double cantc=Double.parseDouble(tf_precioc.getText().trim());
        double cantv=Double.parseDouble(tf_preciov.getText().trim());
        int cv=Integer.parseInt(tf_cantidadv.getText().trim());
        
       // System.out.println(resta);
        double ganancia=(cantv-cantc)*cv;
        String g=String.valueOf(ganancia);
        tf_ganancias.setText(g);
        try{
            Connection cn=Conexion.conectar();
            PreparedStatement st=cn.prepareStatement("insert into tb_ganancias values (?,?,?,?)");
            st.setString(1, tf_nombre.getText().trim());
            st.setString(2, tf_descripcion.getText().trim());
            st.setString(3, cb_categoria.getSelectedItem().toString());
            st.setDouble(4, Double.parseDouble(tf_ganancias.getText().trim()));
            if(st.executeUpdate()>0){
                resp=true;
            }
            
            //ResultSet rs=st.executeQuery();
            cn.close();
        }catch(Exception e){
            System.out.println(e);
        }
        /**/
    }
    private int resta(){
        int stock=Integer.parseInt(tf_cantidad.getText().trim());
        int venta=Integer.parseInt(tf_cantidadv.getText().trim());
        int resta=stock-venta;
        return resta;
    }
    
    //metodo para relacionar categorias
    private String relacionarCategorias(String idCate){
        Connection con=Conexion.conectar();
        DefaultTableModel model= new DefaultTableModel();
        String sql="select descripcion from tb_categorias where idCategoria = '" + idCate + "'";
        Statement st;
            
        try{
            st=con.createStatement();
            ResultSet rs=st.executeQuery(sql);
            while(rs.next()){
                descripcionCat=rs.getString("descripcion");
            }
            con.close();
        }catch(SQLException e){
            System.out.println("Error al llenar la tabla categoria." + e);
        }
        return descripcionCat;
    }
    private String idCategoria(){
        String sql="select * from tb_categorias where descripcion= '" + this.cb_categoria.getSelectedItem().toString() + "'";
        Statement st;
        //int obtenerIdCategoriaCombo=0;
         try{
            Connection cn=Conexion.conectar();
            st=cn.createStatement();
            ResultSet rs=st.executeQuery(sql);
           
            while(rs.next()){
                obtenerIdCategoriaCombo=rs.getString("idCategoria");
            }
            cn.close();
        }catch(SQLException e){
            System.out.print("Error al obetener id categorias" + e);
        }
        return obtenerIdCategoriaCombo;
    }
}
